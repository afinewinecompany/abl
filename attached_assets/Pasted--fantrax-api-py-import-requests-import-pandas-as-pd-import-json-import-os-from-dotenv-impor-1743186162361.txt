# === fantrax_api.py ===
import requests
import pandas as pd
import json
import os
from dotenv import load_dotenv

load_dotenv()

class FantraxClient:
    def __init__(self, league_id):
        self.league_id = league_id
        self.auth_token = os.getenv("FANTRAX_TOKEN")
        self.base_url = f"https://www.fantrax.com/fantasy/league/{self.league_id}/livescoring?mobileMatchupView=false"

    def get_live_scoring(self, scoring_period):
        if not self.auth_token:
            raise ValueError("Missing FANTRAX_TOKEN. Please run selenium_login.py first.")
        
        api_url = "https://www.fantrax.com/fxpa/req/league/liveScoring"
        headers = {
            "Authorization": f"Bearer {self.auth_token}",
            "Content-Type": "application/json",
        }
        payload = {
            "leagueId": self.league_id,
            "scoringPeriod": scoring_period
        }
        response = requests.post(api_url, json=payload, headers=headers)

        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error fetching live scoring: {response.status_code}")

    def parse_matchups(self, data):
        matchups = []
        periods = data.get("liveScoringMatchups", [])
        for m in periods:
            matchup = {
                "matchupId": m["id"],
                "team1": m["home"]["team"]["name"],
                "team1Score": m["home"]["score"],
                "team2": m["away"]["team"]["name"],
                "team2Score": m["away"]["score"]
            }
            matchups.append(matchup)
        return pd.DataFrame(matchups)


# === selenium_login.py ===
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
import time
import os
from dotenv import load_dotenv

load_dotenv()

def fantrax_login():
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    driver = webdriver.Chrome(options=options)
    matchup_url = f"https://www.fantrax.com/fantasy/league/{os.getenv('LEAGUE_ID')}/livescoring?mobileMatchupView=false"
    driver.get("https://www.fantrax.com/fantasy/login")

    time.sleep(2)

    username = driver.find_element(By.ID, "loginUsername")
    password = driver.find_element(By.ID, "loginPassword")

    username.send_keys(os.getenv("FANTRAX_USERNAME"))
    password.send_keys(os.getenv("FANTRAX_PASSWORD"))
    password.send_keys(Keys.RETURN)

    time.sleep(3)

    driver.get(matchup_url)
    time.sleep(2)

    # Extract token from local storage
    token = driver.execute_script("return window.localStorage.getItem('fx.token');")

    driver.quit()

    if token:
        with open(".env", "a") as f:
            f.write(f"\nFANTRAX_TOKEN={token}\n")
        print("‚úÖ Token saved to .env")
    else:
        print("‚ùå Login failed. No token found.")


if __name__ == "__main__":
    fantrax_login()


# === scheduler.py ===
import time
import schedule
from fantrax_api import FantraxClient
import os
from dotenv import load_dotenv

load_dotenv()

LEAGUE_ID = os.getenv("LEAGUE_ID")
SCORING_PERIOD = 1

client = FantraxClient(LEAGUE_ID)

def job():
    try:
        data = client.get_live_scoring(SCORING_PERIOD)
        df = client.parse_matchups(data)
        os.makedirs("data", exist_ok=True)
        df.to_csv("data/live_matchups.csv", index=False)
        print("‚úÖ Matchups updated")
    except Exception as e:
        print(f"‚ùå Error: {e}")

schedule.every(5).minutes.do(job)

print("üì° Fantrax Live Scoring Scheduler Running...")
while True:
    schedule.run_pending()
    time.sleep(1)


# === fantrax_standings.py ===
from fantraxapi import FantraxAPI
import pandas as pd

LEAGUE_ID = "grx2lginm1v4p5jd"

def get_league_standings():
    api = FantraxAPI(LEAGUE_ID)
    standings = api.standings()

    data = []
    for team in standings:
        data.append({
            "Team": team.name,
            "Wins": team.wins,
            "Losses": team.losses,
            "Points": team.points
        })

    return pd.DataFrame(data)


# === streamlit_app.py ===
import streamlit as st
import pandas as pd
import os
from fantrax_standings import get_league_standings

st.set_page_config(page_title="Fantrax Live Scoring", layout="wide")

st.title("üèÜ Fantrax League Dashboard")

# Live Matchups Section
st.header("‚öæ Live Matchups")
if st.button("üîÑ Refresh Matchup Data"):
    os.system("python scheduler.py &")

try:
    df = pd.read_csv("data/live_matchups.csv")
    st.dataframe(df.style.format({
        "team1Score": "{:.1f}",
        "team2Score": "{:.1f}"
    }))
except FileNotFoundError:
    st.warning("No matchup data yet. Please wait for the first pull.")

# Standings Section
st.header("üìä Current Standings")
try:
    standings_df = get_league_standings()
    st.dataframe(standings_df)
except Exception as e:
    st.error(f"Failed to fetch standings: {e}")
